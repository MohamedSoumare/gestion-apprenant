// Prisma schema ajusté selon le MCD et MLD

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ModuleStatus {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RegistrationStatus {
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
}

// Modèle Module
model Module {
  id       Int          @id @default(autoincrement())
  name     String       @db.VarChar(50)
  duration Int
  price    Decimal?      @db.Decimal(10, 2)
  status   ModuleStatus

  // Relations
  registrations Registration[]
  payments      Payment[]

  @@map("modules")
}

// Modèle Student
model Student {
  id          Int           @id @default(autoincrement())
  fullName    String        @map("full_name") @db.VarChar(50)
  phoneNumber String        @map("phone_number") @db.VarChar(15)
  email       String?        @db.VarChar(100)
  address     String        @db.VarChar(100)
  tutor       String        @db.VarChar(50)
  status      StudentStatus

  // Relations
  registrations Registration[]
  payments      Payment[]

  @@map("students")
}

// Modèle Registration
model Registration {
  id           Int      @id @default(autoincrement())
  dateRegister DateTime @map("date_register")
  startDate    DateTime @map("start_date")
  endDate      DateTime @map("end_date")
  amount       Decimal  @db.Decimal(10, 2)
  rest         Decimal? @db.Decimal(10, 2)

  studentId    Int
  moduleId     Int

  student Student @relation(fields: [studentId], references: [id])
  module  Module  @relation(fields: [moduleId], references: [id])

  payments Payment[]

  @@map("registrations")
}

// Modèle Payment
model Payment {
  id          Int      @id @default(autoincrement())
  paymentDate DateTime @map("payment_date")
  amount      Decimal  @db.Decimal(10, 2)
  payer       String        @db.VarChar(50)
  payerNumber String        @map("payer_number") @db.VarChar(15)
  paymentMode PaymentMethod

  // Relations obligatoires
  registrationId Int
  registration   Registration @relation(fields: [registrationId], references: [id])
  moduleId       Int
  module         Module       @relation(fields: [moduleId], references: [id])
  studentId      Int
  student        Student      @relation(fields: [studentId], references: [id])

  @@map("payments")
}
